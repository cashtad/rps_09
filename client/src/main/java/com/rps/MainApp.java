package com.rps;

import com.rps.network.EventBus;
import com.rps.network.NetworkManager;
import com.rps.network.ProtocolHandler;
import com.rps.network.ServerEvent;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;

public class MainApp extends Application {

    private NetworkManager networkManager;
    private ProtocolHandler protocolHandler;
    private EventBus eventBus;

    private Stage primaryStage;
    private Label statusLabel;
    private Button listRoomsButton;
    private TextField nameField;
    private PlayerProfile playerProfile;

    @Override
    public void start(Stage stage) {
        this.primaryStage = stage;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        networkManager = new NetworkManager();
        eventBus = new EventBus();
        protocolHandler = new ProtocolHandler(networkManager, eventBus);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ü–ï–†–ï–î –ø–æ–∫–∞–∑–æ–º UI
        setupEventHandlers();

        // ==================== UI SETUP ====================
        VBox loginLayout = new VBox(10);
        loginLayout.setStyle("-fx-padding: 20;");

        nameField = new TextField();
        nameField.setPromptText("–í–≤–µ–¥–∏—Ç–µ –∏–º—è");

        Button connectButton = new Button("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è");

        statusLabel = new Label();
        statusLabel.setStyle("-fx-text-fill: green; -fx-font-weight: bold;");

        listRoomsButton = new Button("–°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç");
        listRoomsButton.setDisable(true);

        loginLayout.getChildren().addAll(nameField, connectButton, statusLabel, listRoomsButton);

        Scene loginScene = new Scene(loginLayout, 300, 200);
        stage.setTitle("RPS Client");
        stage.setScene(loginScene);
        stage.show();

        // ==================== BUTTON ACTIONS ====================
        connectButton.setOnAction(e -> {
            connectToServer();
        });
        listRoomsButton.setOnAction(e -> protocolHandler.requestRooms());
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     */
    private void setupEventHandlers() {
        // ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ==========
        eventBus.subscribeAll(event -> {
//            System.out.println("üì® Event: " + event.getCommand());
        });

        // ========== WELCOME - —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ==========
        eventBus.subscribe("WELCOME", event -> {
            String token = event.getPart(1);
            playerProfile = new PlayerProfile(nameField.getText());
            playerProfile.setToken(token);
            playerProfile.setStatus(PlayerProfile.PlayerStatus.CONNECTED);

            statusLabel.setText("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫ " + token);
            listRoomsButton.setDisable(false);
        });

        // ========== ROOMS_LOADED - —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ==========
        eventBus.subscribe("ROOMS_LOADED", event -> {
            String roomsData = event.getPart(1);
            List<String> roomList = roomsData != null && !roomsData.isEmpty()
                    ? List.of(roomsData.split("\\|"))
                    : new ArrayList<>();
            showRoomsScene(roomList);
        });

        // ========== ROOM_JOINED - —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ ==========
        eventBus.subscribe("ROOM_JOINED", event -> {
            String roomId = event.getPart(1);
            playerProfile.setStatus(PlayerProfile.PlayerStatus.IN_LOBBY);
            showLobbyScene(roomId, playerProfile.getName());
        });

        // ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ==========
        eventBus.subscribe("ERR", event -> {
            String errorCode = event.getPart(1);
            String errorMsg = event.getPartsCount() > 2 ? event.getPart(2) : "Unknown error";
            showAlert("–û—à–∏–±–∫–∞", "Error " + errorCode + ": " + errorMsg);
        });
    }

    private void connectToServer() {
        String nickname = nameField.getText().trim();
        if (nickname.isEmpty()) {
            showAlert("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è!");
            return;
        }

        try {
            networkManager.connect("0.0.0.0", 2500);
            protocolHandler.sendHello(nickname);
        } catch (Exception ex) {
            showAlert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", ex.getMessage());
            ex.printStackTrace();
        }
    }

    private void showRoomsScene(List<String> roomsRaw) {
        VBox roomsLayout = new VBox(10);
        roomsLayout.setStyle("-fx-padding: 20;");

        Label title = new Label("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:");

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã GameRoom
        List<GameRoom> roomItems = new ArrayList<>();
        for (String raw : roomsRaw) {
            String[] parts = raw.split(" ");
            if (parts.length >= 4) {
                roomItems.add(new GameRoom(
                        Integer.parseInt(parts[0]),
                        parts[1],
                        Integer.parseInt(parts[2].split("/")[0]),
                        parts[3]
                ));
            }
        }

        ListView<GameRoom> listView = new ListView<>();
        listView.getItems().addAll(roomItems);

        listView.setCellFactory(lv -> new ListCell<>() {
            private final Button joinButton = new Button("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è");
            private final HBox hbox = new HBox(10);

            {
                joinButton.setOnAction(e -> {
                    GameRoom item = getItem();
                    if (item != null) {
                        protocolHandler.joinRoom(String.valueOf(item.getId()));
                    }
                });
            }

            @Override
            protected void updateItem(GameRoom item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                    setGraphic(null);
                } else {
                    Label nameLabel = new Label(item.toString());
                    hbox.getChildren().setAll(nameLabel, joinButton);
                    setGraphic(hbox);
                }
            }
        });

        Button createRoomButton = new Button("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É");
        createRoomButton.setOnAction(e -> showCreateRoomDialog());

        Button refreshButton = new Button("–û–±–Ω–æ–≤–∏—Ç—å");
        refreshButton.setOnAction(e -> protocolHandler.requestRooms());

        HBox buttons = new HBox(10, createRoomButton, refreshButton);
        roomsLayout.getChildren().addAll(title, listView, buttons);

        Scene roomsScene = new Scene(roomsLayout, 400, 400);
        primaryStage.setScene(roomsScene);
    }

    private void showCreateRoomDialog() {
        Stage dialog = new Stage();
        dialog.initOwner(primaryStage);
        dialog.setTitle("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É");

        VBox dialogLayout = new VBox(10);
        dialogLayout.setStyle("-fx-padding: 20;");

        Label prompt = new Label("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:");
        TextField roomNameField = new TextField();

        Button cancelButton = new Button("–û—Ç–º–µ–Ω–∞");
        Button confirmButton = new Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");

        cancelButton.setOnAction(e -> dialog.close());
        confirmButton.setOnAction(e -> {
            String roomName = roomNameField.getText().trim();
            if (!roomName.isEmpty()) {
                protocolHandler.createRoom(roomName);
                dialog.close();
            }
        });

        HBox buttons = new HBox(10, cancelButton, confirmButton);
        dialogLayout.getChildren().addAll(prompt, roomNameField, buttons);

        Scene dialogScene = new Scene(dialogLayout, 250, 150);
        dialog.setScene(dialogScene);
        dialog.show();
    }

    private void showLobbyScene(String roomId, String playerName) {
        BorderPane lobbyLayout = new BorderPane();
        lobbyLayout.setStyle("-fx-padding: 20;");

        // ======= –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ =======
        Button backButton = new Button("–ù–∞–∑–∞–¥");
        backButton.setOnAction(e -> {
            protocolHandler.leaveRoom();
            protocolHandler.requestRooms();
        });
        lobbyLayout.setTop(backButton);
        BorderPane.setMargin(backButton, new Insets(0, 0, 10, 0));

        // ======= –°–ª–µ–≤–∞: —Ç–≤–æ–π –∏–≥—Ä–æ–∫ =======
        VBox playerBox = new VBox(10);
        playerBox.setStyle("-fx-border-color: black; -fx-padding: 10;");
        Label playerLabel = new Label("–í—ã: " + playerName);
        Label playerStatusLabel = new Label("–°—Ç–∞—Ç—É—Å: –ù–µ –≥–æ—Ç–æ–≤");
        Button readyButton = new Button("–ì–æ—Ç–æ–≤");
        playerBox.getChildren().addAll(playerLabel, playerStatusLabel, readyButton);

        // ======= –°–ø—Ä–∞–≤–∞: –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ =======
        VBox opponentBox = new VBox(10);
        opponentBox.setStyle("-fx-border-color: black; -fx-padding: 10;");
        Label opponentLabel = new Label("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: -");
        Label opponentStatusLabel = new Label("–°—Ç–∞—Ç—É—Å: -");
        opponentBox.getChildren().addAll(opponentLabel, opponentStatusLabel);

        lobbyLayout.setLeft(playerBox);
        lobbyLayout.setRight(opponentBox);

        Scene lobbyScene = new Scene(lobbyLayout, 500, 300);
        primaryStage.setScene(lobbyScene);

        // ========== –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ª–æ–±–±–∏ ==========

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∏–≥—Ä–æ–∫
        eventBus.subscribe("PLAYER_JOINED", event -> {
            String opponentName = event.getPart(1);
            opponentLabel.setText("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: " + opponentName);
            opponentStatusLabel.setText("–°—Ç–∞—Ç—É—Å: –ù–µ –≥–æ—Ç–æ–≤");
        });

        // –ò–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤
        eventBus.subscribe("PLAYER_READY", event -> {
            String readyPlayer = event.getPart(1);
            if (!readyPlayer.equals(playerName)) {
                opponentStatusLabel.setText("–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤");
            } else {
                playerStatusLabel.setText("–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤");
                readyButton.setDisable(true);
            }
        });

        // –ò–≥—Ä–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤
        eventBus.subscribe("PLAYER_UNREADY", event -> {
            String unreadyPlayer = event.getPart(1);
            if (!unreadyPlayer.equals(playerName)) {
                opponentStatusLabel.setText("–°—Ç–∞—Ç—É—Å: –ù–µ –≥–æ—Ç–æ–≤");
            } else {
                playerStatusLabel.setText("–°—Ç–∞—Ç—É—Å: –ù–µ –≥–æ—Ç–æ–≤");
                readyButton.setDisable(false);
            }
        });

        // –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É
        eventBus.subscribe("PLAYER_LEFT", event -> {
            opponentLabel.setText("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: -");
            opponentStatusLabel.setText("–°—Ç–∞—Ç—É—Å: -");
        });

        // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
        eventBus.subscribe("GAME_START", event -> {
            showAlert("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!", "–£–¥–∞—á–∏!");
            // TODO: showGameScene();
        });

        // ======= –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤ =======
        readyButton.setOnAction(e -> {
            protocolHandler.markReady();
        });
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    @Override
    public void stop() throws Exception {
        super.stop();
        eventBus.clear();
        networkManager.disconnect();
    }

    public static void main(String[] args) {
        launch(args);
    }
}